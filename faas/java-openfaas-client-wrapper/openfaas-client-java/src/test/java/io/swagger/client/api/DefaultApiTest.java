/*
 * OpenFaaS API Gateway
 * OpenFaaS API documentation
 *
 * OpenAPI spec version: 0.8.12
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.google.gson.JsonElement;
import com.google.gson.reflect.TypeToken;


import io.swagger.client.ApiException;
import io.swagger.client.model.DeleteFunctionRequest;
import io.swagger.client.model.FunctionDefintion;
import io.swagger.client.model.FunctionListEntry;
import io.swagger.client.model.Info;
import org.junit.Test;
import org.junit.Ignore;

import java.lang.reflect.Type;
import java.util.*;


/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final static String BINARY_DATA_HERE = "{ \"bucketName\": \"imagesbucket\", \"objectKey\": \"sample.jpg\", \"inputParameters\": [\"200\", \"400\"] }";
    private final DefaultApi api = new DefaultApi();

    final static String bucketNamePath = "bucketName";
    final static String objectKeyPath = "objectKey";
    final static String DEFAULT_INPUT_PARAMETERS_KEY = "inputParameters";
    final static String LEN = "200";
    final static String WID = "400";

    public static void main(String[] args) {

        DefaultApi apiInstance = new DefaultApi();
        List<FunctionListEntry> response = new ArrayList();
        try {
            response = apiInstance.systemFunctionsGet();


        } catch (ApiException e) {
            System.err.println("Exception when calling DefaultApi#asyncFunctionFunctionNamePost");
            e.printStackTrace();
        }

        System.out.println(response);

        List<FunctionListEntry> udfPutList = new ArrayList<FunctionListEntry>();
        List<FunctionListEntry> udfDeleteList = new ArrayList<FunctionListEntry>();
        List<FunctionListEntry> udfAccessList = new ArrayList<FunctionListEntry>();
        List<FunctionListEntry> udfCopyList = new ArrayList<FunctionListEntry>();


        for (int i = 0; i < response.size(); i++) {
            FunctionListEntry functionListEntry = response.get(i);
            Map<String, String> annotations = functionListEntry.getAnnotations();
            String invocation_event_types = annotations.get("invocation_event_types");

            if (invocation_event_types != null) {
                Gson gson = new Gson();
                JsonElement jsonElement = new JsonParser().parse(invocation_event_types);
                JsonArray jsonArray = jsonElement.getAsJsonArray();
                List<String> list = gson.fromJson(jsonArray, new TypeToken<List<String>>() {}.getType());
                for (int j = 0; j < list.size(); j++) {
                    String type = list.get(j);
                    if (type.compareToIgnoreCase("put") == 0)
                        udfPutList.add(functionListEntry);
                    else if (type.compareToIgnoreCase("delete") == 0)
                        udfDeleteList.add(functionListEntry);
                    else if (type.compareToIgnoreCase("get") == 0)
                        udfAccessList.add(functionListEntry);
                    else if (type.compareToIgnoreCase("copy") == 0)
                        udfCopyList.add(functionListEntry);
                }
            }

        }

        String eventType = "put";
        if (eventType.compareToIgnoreCase("put") == 0) {

            if (false == udfPutList.isEmpty()) {
                for (int i = 0; i < udfPutList.size(); i++) {
                    String functionName = udfPutList.get(i).getName(); // String | Function name
                    String temp = BINARY_DATA_HERE;
                    byte[] input1 = temp.getBytes(); // byte[] | (Optional) data to pass to function


                    JsonObject jsonObject = new JsonObject();
                    jsonObject.addProperty(bucketNamePath, "imagesbucket");
                    jsonObject.addProperty(objectKeyPath, "sample.jpg");

                    List<String> list = Arrays.asList(LEN, WID);
                    String  innerObjStr = new Gson().toJson(list);
                    JsonElement jsonElement = new JsonParser().parse(innerObjStr);

                    jsonObject.add(DEFAULT_INPUT_PARAMETERS_KEY, jsonElement);


                    String jsonStr = jsonObject.toString();
                    byte[] input = jsonStr.getBytes();
                    try {
                        apiInstance.functionFunctionNamePost(functionName, input);
                    } catch (ApiException e) {
                        System.err.println("Exception when calling DefaultApi#functionFunctionNamePost");
                        e.printStackTrace();
                    }

                }

            }
        }


        String functionName = "functionName_example"; // String | Function name
        byte[] input = "BINARY_DATA_HERE".getBytes(); // byte[] | (Optional) data to pass to function
        try {
            apiInstance.asyncFunctionFunctionNamePost(functionName, input);
        } catch (ApiException e) {
            System.err.println("Exception when calling DefaultApi#asyncFunctionFunctionNamePost");
            e.printStackTrace();
        }
    }
    
    /**
     * Invoke a function asynchronously in OpenFaaS
     *
     * See https://github.com/openfaas/faas/blob/master/guide/asynchronous.md.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void asyncFunctionFunctionNamePostTest() throws ApiException {
        String functionName = null;
        byte[] input = null;
        api.asyncFunctionFunctionNamePost(functionName, input);

        // TODO: test validations
    }
    
    /**
     * Invoke a function defined in OpenFaaS
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void functionFunctionNamePostTest() throws ApiException {
        String functionName = null;
        byte[] input = null;
        api.functionFunctionNamePost(functionName, input);

        // TODO: test validations
    }
    
    /**
     * Healthcheck
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void healthzGetTest() throws ApiException {
        api.healthzGet();

        // TODO: test validations
    }
    
    /**
     * Event-sink for AlertManager, for auto-scaling
     *
     * Internal use for AlertManager, requires valid AlertManager alert JSON
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemAlertPostTest() throws ApiException {
        Object body = null;
        api.systemAlertPost(body);

        // TODO: test validations
    }
    
    /**
     * Get a summary of an OpenFaaS function
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemFunctionFunctionNameGetTest() throws ApiException {
        String functionName = null;
        FunctionListEntry response = api.systemFunctionFunctionNameGet(functionName);

        // TODO: test validations
    }
    
    /**
     * Remove a deployed function.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemFunctionsDeleteTest() throws ApiException {
        DeleteFunctionRequest body = null;
        api.systemFunctionsDelete(body);

        // TODO: test validations
    }
    
    /**
     * Get a list of deployed functions with: stats and image digest
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemFunctionsGetTest() throws ApiException {
        List<FunctionListEntry> response = api.systemFunctionsGet();

        // TODO: test validations
    }
    
    /**
     * Deploy a new function.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemFunctionsPostTest() throws ApiException {
        FunctionDefintion body = null;
        api.systemFunctionsPost(body);

        // TODO: test validations
    }
    
    /**
     * Update a function.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemFunctionsPutTest() throws ApiException {
        FunctionDefintion body = null;
        api.systemFunctionsPut(body);

        // TODO: test validations
    }
    
    /**
     * Get info such as provider version number and provider orchestrator
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemInfoGetTest() throws ApiException {
        Info response = api.systemInfoGet();

        // TODO: test validations
    }
    
    /**
     * Scale a function
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systemScaleFunctionFunctionNamePostTest() throws ApiException {
        String functionName = null;
        byte[] input = null;
        api.systemScaleFunctionFunctionNamePost(functionName, input);

        // TODO: test validations
    }
    
}
